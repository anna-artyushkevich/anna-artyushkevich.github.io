{"version":3,"sources":["App.js","index.js"],"names":["mainIdentity","drivers","label","value","detectURL","message","replace","urlMatch","Title","props","className","owner","InputMessage","context","handleSendMessage","bind","handleTyping","event","preventDefault","this","messageInput","length","sendMessageLoading","ownerInput","typing","resetTyping","currentChannel","endChat","loadingClass","isLoading","sendButtonIcon","isMessageInputEmpty","onSubmit","type","ref","placeholder","onKeyDown","onKeyUp","tabIndex","onClick","sid","React","Component","TypingIndicator","typersDisplay","countTypers","key","isTyping","substr","HeaderBox","style","control","base","state","border","isFocused","boxShadow","fontSize","option","handleChange","options","e","console","log","startViaWeb","startViaTextnow","isRoot","uniqueName","split","pop","find","dr","parseInt","driverReadOnly","deleteAllChannels","backToRoot","onChange","styles","isSearchable","ActionBox","sender","setState","sendMessage","setTimeout","ch","closedChannelList","channel","startEmptyChat","isSingleUser","MessageList","messages","slice","reverse","map","messageItem","id","timestamp","MessageItem","messagePosition","dangerouslySetInnerHTML","__html","moment","fromNow","ChannelList","clickHandler","joinChannel","channelList","flag","Object","keys","channelItem","status","author","body","friendlyName","ChatBox","ChatRoom","error","root","messagesReal","allChannels","users","currentTextnowChatId","isChatBoxOpen","getAllChannels","setupChatClient","messagesLoaded","messageAdded","handleError","setupSecondaryChat","setupChatBySMS","deleteAllTextnowChannels","deleteCurrentTextnowChannels","twilioMessageToUIMessageReal","twilioMessageToUIMessage","backToChannelList","openChatBox","identity","URL","agent","name","driverWeb","driverTextNow","driverId","communicationType","client","rootChannel","$","ajax","url","contentType","data","then","Chat","create","token","catch","cl","getUserChannelDescriptors","paginator","promise","when","items","forEach","getChannelByUniqueName","getMessages","totalMessages","lastMessage","push","sort","a","b","Date","getTime","code","createChannel","join","on","channelName","i","headers","response","chatId","twilioChatId","newMessageItem","prevState","writer","stateTyping","index","msg","messagePage","chatBoxes","user","data-tooltip","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4b1b0b0.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link, withRouter } from 'react-router-dom';\nimport Chat from 'twilio-chat';\nimport $ from 'jquery';\nimport moment from 'moment';\nimport Select from 'react-select';\n\nconst mainIdentity = 'agents@gocurb.com';\nconst drivers = [\n    { label: \"John Webber\", value: 1 },\n    { label: \"Tom Peet\", value: 2 },\n    { label: \"Peter Kook\", value: 3 },\n    { label: \"Artur Doil\", value: 4 },\n    { label: \"+13155896818\", value: 5 }\n];\n\n/* detect url in a message and add a link tag */\nfunction detectURL(message) {\n  var urlRegex = /(((https?:\\/\\/)|(www\\.))[^\\s]+)/g;\n  return message.replace(urlRegex, function(urlMatch) {\n    return '<a href=\"' + urlMatch + '\">' + urlMatch + '</a>';\n  })\n}\n\n/* Title component */\nconst Title = props => (\n  <div className={\"chatApp__convTitle\"}>{props.owner}'s display</div>\n);\n\n/* InputMessage component - used to type the message */\nclass InputMessage extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.handleSendMessage = this.handleSendMessage.bind(this);\n    this.handleTyping = this.handleTyping.bind(this);\n  }\n  handleSendMessage(event) {\n    event.preventDefault();\n    /* Disable sendMessage if the message is empty */\n    if( this.messageInput.value.length > 0 ) {\n      this.props.sendMessageLoading(this.ownerInput.value, this.messageInput.value);\n      /* Reset input after send*/\n      this.messageInput.value = '';\n    }\n  }\n  handleTyping(event) {\n    /* Tell users when another user has at least started to write */\n    if( this.messageInput.value.length > 0 ) {\n      this.props.typing(this.ownerInput.value);\n    }\n    else {\n      /* When there is no more character, the user no longer writes */\n      this.props.resetTyping(this.ownerInput.value);\n    }\n  }\n  render() {\n    /* If the chatbox state is loading, loading class for display */\n    const {currentChannel, endChat} = this.props;\n    let loadingClass = this.props.isLoading ? 'chatApp__convButton--loading' : '';\n    let sendButtonIcon = <i className={\"material-icons\"}>send</i>;\n    let isMessageInputEmpty = !(this.messageInput && this.messageInput.value.length);\n    return (\n      <form onSubmit={this.handleSendMessage}>\n        <input\n          type=\"hidden\"\n          ref={owner => (this.ownerInput = owner)}\n          value={this.props.owner}\n        />\n        <input\n          type=\"text\"\n          ref={message => (this.messageInput = message)}\n          className={\"chatApp__convInput\"}\n          placeholder=\"Send message...\"\n          onKeyDown={this.handleTyping}\n          onKeyUp={this.handleTyping}\n          tabIndex=\"0\"\n        />\n        {isMessageInputEmpty\n          ? <div className='end-chat'>\n              <i className=\"fas fa-ellipsis-v\"></i>\n              <button\n                className='end-chat-btn'\n                onClick={endChat.bind(this, currentChannel.sid)}\n              >\n                <i className=\"fas fa-times\"></i> End this chat session\n              </button>\n            </div>\n          : <div className={'chatApp__convButton ' + loadingClass} onClick={this.handleSendMessage}>\n            {sendButtonIcon}\n          </div>\n        }\n      </form>\n    );\n  }\n}\n\n/* TypingIndicator component */\nconst TypingIndicator = props => {\n  let typersDisplay = '';\n  let countTypers = 0;\n  /* for each user writing messages in chatroom */\n  for ( var key in props.isTyping ) {\n    /* retrieve the name if it isn't the owner of the chatbox */\n    if( key !== props.owner && props.isTyping[key] ) {\n      typersDisplay += ', ' + key;\n      countTypers++;\n    }\n  }\n  /* formatting text */\n  typersDisplay = typersDisplay.substr(1);\n  typersDisplay += (( countTypers > 1 ) ? ' are ' : ' is ');\n  /* if at least one other person writes */\n  if ( countTypers > 0 ) {\n    return (\n      <div className={\"chatApp__convTyping\"}>{typersDisplay} writing\n        <span className={\"chatApp__convTypingDot\"}></span>\n      </div>\n    );\n  }\n  return (\n    <div className={\"chatApp__convTyping\"}></div>\n  );\n}\n\n/* HeaderBox component - contains navigation controls */\nclass HeaderBox extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.handleChange = this.handleChange.bind(this);\n    this.drivers = [\n      {\n        label: \"chat with fake drivers\",\n        options: [ drivers[0], drivers[1], drivers[2], drivers[3] ]\n      },\n      {\n        label: \"chat via textNow\",\n        options: [ drivers[4] ]\n      },\n    ];\n  }\n  handleChange(e) {\n    console.log('e:', e);\n\n    if (e.value !== 5)\n      this.props.startViaWeb(`web-${e.value}`, 'web');\n    else\n      this.props.startViaTextnow();\n  }\n  style = {\n    control: (base, state) => ({\n      ...base,\n      border: state.isFocused ? 0 : 0,\n      // This line disable the blue border\n      boxShadow: state.isFocused ? 0 : 0,\n      \"&:hover\": {\n        border: state.isFocused ? 0 : 0\n      },\n      fontSize: 14\n    }),\n    option: (base) => {\n      return {\n        ...base,\n        fontSize: 14\n      }\n    }\n  };\n\n  render () {\n    const {isRoot, currentChannel} = this.props;\n    console.log('currentChannel:', currentChannel);\n\n    let value = currentChannel && (currentChannel.type === 'web' ? currentChannel.uniqueName.split('-').pop() : '5');\n    let option = drivers && drivers.find(dr => dr.value === parseInt(value));\n    let driverReadOnly = option && option.label;\n\n    return (\n      <div className='header'>\n        {isRoot\n          ? <div className='all-conv'>All Chats\n              <button\n                className='link delete'\n                onClick={this.props.deleteAllChannels}\n              >\n                Delete all textNow chats\n              </button>\n            </div>\n          : (this.props.owner === mainIdentity &&\n              <Fragment>\n                <button\n                  className='link'\n                  onClick={this.props.backToRoot}\n                >\n                  <i className=\"fas fa-chevron-left\"></i>\n                </button>\n                {!driverReadOnly\n                  ? <div className='dropdown'>\n                      <div className='label'>To:</div>\n                      <Select\n                        placeholder={'Select Driver...'}\n                        options={this.drivers}\n                        onChange={this.handleChange.bind(this)}\n                        styles={this.style}\n                        isSearchable\n                      />\n                    </div>\n                  : <div className='dropdown'>\n                      <div className='label'>{driverReadOnly}</div>\n                    </div>\n                }\n              </Fragment>\n            )\n        }\n      </div>\n    );\n  }\n}\n\n/* ActionBox component - contains send buttons */\nclass ActionBox extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      isLoading: false\n    };\n    this.sendMessageLoading = this.sendMessageLoading.bind(this);\n  }\n  /* catch the sendMessage signal and update the loading state then continues the sending instruction */\n  sendMessageLoading(sender, message) {\n    this.setState({ isLoading: true });\n    this.props.sendMessage(sender, message);\n    setTimeout(() => {\n      this.setState({ isLoading: false });\n    }, 400);\n  }\n  render() {\n    let ch = this.props.currentChannel && this.props.closedChannelList && this.props.closedChannelList.find(ch => ch.channel === this.props.currentChannel.sid);\n    return (\n      this.props.isRoot\n        ? <button\n            className='btn start-chat'\n            onClick={this.props.startEmptyChat}\n          >\n            <i className=\"fas fa-pencil-alt\"></i>\n          </button>\n        : ch\n            ? <div className='message-disabled-zone'>You cannot send messages to the other agent's chat</div>\n            : !this.props.isSingleUser &&\n                <div className={\"chatApp__convSendMessage clearfix\"}>\n                  <TypingIndicator\n                    owner={this.props.owner}\n                    isTyping={this.props.isTyping}\n                  />\n                  <InputMessage\n                    isLoading={this.state.isLoading}\n                    owner={this.props.owner}\n                    sendMessage={this.props.sendMessage}\n                    sendMessageLoading={this.sendMessageLoading}\n                    typing={this.props.typing}\n                    resetTyping={this.props.resetTyping}\n                    endChat={this.props.endChat}\n                    currentChannel={this.props.currentChannel}\n                  />\n                </div>\n    );\n  }\n}\n\n/* MessageList component - contains all messages */\nclass MessageList extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n  }\n\n  render() {\n    const {messages, isRoot} = this.props;\n    if (isRoot) return false;\n\n    return (\n      <div className={\"chatApp__convTimeline\"}>\n        {messages.slice(0).reverse().map(\n          messageItem => (\n            <MessageItem\n              key={messageItem.id}\n              owner={this.props.owner}\n              sender={messageItem.sender}\n              message={messageItem.message}\n              timestamp={messageItem.timestamp}\n            />\n          ))\n        }\n      </div>\n    );\n  }\n}\n\n/* MessageItem component - composed of a message and the sender's avatar */\nconst MessageItem = props => {\n  /* message position formatting - right if I'm the author */\n  let messagePosition = (( props.owner !== props.sender ) ? 'chatApp__convMessageItem--left' : 'chatApp__convMessageItem--right');\n  return (\n    <div className={\"chatApp__convMessageItem \" + messagePosition + \" clearfix\"}>\n      <div className=\"chatApp__convMessageValue\" dangerouslySetInnerHTML={{__html: props.message}}></div>\n      <div className=\"chatApp__convMessageTime\">{ moment(props.timestamp).fromNow() }</div>\n      <div className=\"chatApp__convMessageAvatar\">{props.sender}</div>\n    </div>\n  );\n}\n\n/* ChannelList component - contains all channels */\nclass ChannelList extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n  clickHandler(channel) {\n    console.log('onClick channel:', channel.uniqueName, ' ', channel.sid);\n    const type = channel.uniqueName ? 'web' : 'textnow'\n    this.props.joinChannel(channel.uniqueName || channel.sid, type);\n  }\n  render() {\n    let {isRoot, channelList, closedChannelList} = this.props;\n    if (!isRoot) return false;\n\n    let clickHandler = this.clickHandler;\n    let flag = false;\n    console.log('closedChannelList: ', closedChannelList);\n    return (\n      <div className={\"chatApp__convTimeline\"}>\n        <div className={\"chatApp__convChannelLine\"}>\n          {Object.keys(channelList).map(function(key) {\n            var channelItem = channelList[key];\n            let ch = closedChannelList && closedChannelList.find(ch => ch.channel === channelItem.sid);\n            let className;\n            if (ch) {\n              className = ch.status;\n              flag = flag ? false : true;\n            }\n            return (\n              <a\n                key={key}\n                className={`channelItem ${className}`}\n                {...(className && flag && {'data-header': 'Archived chats'})}\n                onClick={clickHandler.bind(this, channelItem)}\n              >\n                <div>\n                  <div className='channelAuthor'>{channelItem.author}</div>\n                  <div className='channelTime'>{channelItem.timestamp && moment(channelItem.timestamp).fromNow()}</div>\n                </div>\n                <div>\n                  <div className='channelBody'>{channelItem.body}</div>\n                  <div className='channelName'>{channelItem.friendlyName}</div>\n                </div>\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\n/* ChatBox component - composed of Title, MessageList, TypingIndicator, InputMessage */\nconst ChatBox = props => (\n  <div className={\"chatApp__conv\"}>\n    <Title\n      owner={props.owner}\n    />\n    <div  className='chat-box'>\n      <HeaderBox\n        isRoot={props.isRoot}\n        owner={props.owner}\n        startViaWeb={props.startViaWeb}\n        startViaTextnow={props.startViaTextnow}\n        deleteAllChannels={props.deleteAllChannels}\n        backToRoot={props.backToRoot}\n        currentChannel={props.currentChannel}\n      />\n      <MessageList\n        owner={props.owner}\n        messages={props.messages}\n        isRoot={props.isRoot}\n      />\n      <ChannelList\n        channelList={props.channelList}\n        joinChannel={props.joinChannel}\n        closedChannelList={props.closedChannelList}\n        endChat={props.endChat}\n        isRoot={props.isRoot}\n      />\n      <ActionBox\n        owner={props.owner}\n        isTyping={props.isTyping}\n        sendMessage={props.sendMessage}\n        typing={props.typing}\n        resetTyping={props.resetTyping}\n        isRoot={props.isRoot}\n        startEmptyChat={props.startEmptyChat}\n        closedChannelList={props.closedChannelList}\n        isSingleUser={props.isSingleUser}\n        endChat={props.endChat}\n        currentChannel={props.currentChannel}\n      />\n    </div>\n  </div>\n);\n\n/* ChatRoom component - composed of multiple ChatBoxes */\nclass ChatRoom extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      isTyping: [],\n      error: null,\n      isLoading: true,\n      channel: null,\n      root: true,\n      messages: [],\n      messagesReal: [],\n      allChannels: [],\n      users: [],\n      currentChannel: null,\n      closedChannelList: [],\n      currentTextnowChatId: null,\n      isChatBoxOpen: false\n  };\n\n    this.typing = this.typing.bind(this);\n    this.resetTyping = this.resetTyping.bind(this);\n    this.getAllChannels = this.getAllChannels.bind(this);\n    this.setupChatClient = this.setupChatClient.bind(this);\n    this.messagesLoaded = this.messagesLoaded.bind(this);\n    this.messageAdded = this.messageAdded.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.setupSecondaryChat = this.setupSecondaryChat.bind(this);\n    this.setupChatBySMS = this.setupChatBySMS.bind(this);\n    this.deleteAllTextnowChannels = this.deleteAllTextnowChannels.bind(this);\n    this.deleteCurrentTextnowChannels = this.deleteCurrentTextnowChannels.bind(this);\n    this.twilioMessageToUIMessageReal = this.twilioMessageToUIMessageReal.bind(this);\n    this.twilioMessageToUIMessage = this.twilioMessageToUIMessage.bind(this);\n    this.backToChannelList = this.backToChannelList.bind(this);\n    this.startEmptyChat = this.startEmptyChat.bind(this);\n    this.endChat = this.endChat.bind(this);\n    this.openChatBox = this.openChatBox.bind(this);\n\n    this.identity = mainIdentity;\n    this.URL = 'https://ehail.stage.gocurb.com:5443';\n    this.agent = { name: mainIdentity };\n    this.driverWeb = { name: 'driver in web' };\n    this.driverTextNow = { name: '+13155896818' };\n    this.driverId = '1';\n    this.communicationType = 'SMS';\n    this.client = null;\n    this.rootChannel = 'all-agents';\n  }\n\n  componentWillMount() {\n    let { URL, identity } = this;\n    $.ajax({\n      url: URL + '/token',\n      type: 'POST',\n      contentType: \"application/json\",\n      data :  '{\"identity\":\"' + identity + '\"}'\n    })\n      .then(data => Chat.create(data.token))\n      .then(client => {\n        this.client = client;\n        return client;\n      })\n      .then(this.getAllChannels)\n      //.then(this.setupChatClient)\n      .catch(this.handleError);\n  }\n\n  componentWillUnmount () {\n    this.deleteCurrentTextnowChannels();\n  }\n\n  handleError(error) {\n    console.error(error);\n    this.setState({\n      error: 'Could not load chat.'\n    });\n  }\n\n  getAllChannels(client) {\n    let cl = client || this.client;\n    var allChannels = [];\n    console.log('this.client: ', this.client);\n    cl.getUserChannelDescriptors().then(function(paginator) {\n      console.log('paginator: ', paginator);\n      var promise = $.when();\n      paginator.items.forEach(channel => {\n        promise = promise.then(() => {\n          return cl.getChannelByUniqueName(channel.uniqueName || channel.sid)\n            .then(channel => {\n              return channel.getMessages().then(function (messages) {\n                console.log('Channel: ', channel);\n                console.log('Channel messages: ', messages.items);\n                const totalMessages = messages.items.length;\n                let lastMessage = messages.items[totalMessages - 1];\n                allChannels.push({\n                  uniqueName: channel.uniqueName,\n                  sid: channel.sid,\n                  friendlyName: channel.friendlyName,\n                  author: (lastMessage && lastMessage.author) || '',\n                  body: (lastMessage && lastMessage.body) || '',\n                  timestamp: (lastMessage && lastMessage.timestamp) || null\n                });\n              });\n            });\n        })\n      });\n      return promise;\n    })\n      .then(() => {\n        const users = [ this.agent ];\n        allChannels.sort((a, b) => (new Date(a.timestamp).getTime() > new Date(b.timestamp).getTime()) ? 1 : -1);\n        this.setState( { allChannels, users });\n        console.log('users: ', this.state.users);\n      })\n  }\n\n  setupChatClient(client) {\n    this.client = client;\n    this.client.getChannelByUniqueName(this.rootChannel)\n      .then(channel => channel)\n      .catch(error => {\n        if (error.body.code === 50300) {\n          return this.client.createChannel({ uniqueName: this.rootChannel });\n        } else {\n          this.handleError(error);\n        }\n      })\n      .then(channel => {\n        this.channel = channel;\n        console.log('this.channel: ', this.channel, ',  this.client', this.client);\n        this.setState({ channel, root: false })\n        return this.channel.join().catch(() => {});\n      })\n      .then(() => {\n        this.setState({ isLoading: false });\n        this.channel.getMessages().then(this.messagesLoaded);\n        this.channel.on('messageAdded', this.messageAdded);\n      })\n      .catch(this.handleError);\n  }\n\n  setupSecondaryChat(channelName, type) {\n    console.log('setupSecondaryChat channelName', channelName);\n\n    this.client.getChannelByUniqueName(channelName)\n      .then(channel => channel)\n      .catch(error => {\n        if (error && error.body && error.body.code === 50300) {\n          return this.client.createChannel({\n            uniqueName: channelName,\n            friendlyName: type === 'web'\n              ? channelName === 'web-1'\n                ? 'John Webber via Web'\n                : channelName === 'web-2'\n                  ? 'Tom Peet via Web'\n                  : channelName === 'web-3'\n                    ? 'Peter Kook via Web'\n                    : 'Artur Doil via Web'\n              : 'Driver via TextNow' });\n        } else {\n          this.handleError(error);\n        }\n      })\n      .then(channel => {\n        this.channel = channel;\n        console.log('setupSecondaryChat this.channel: ', this.channel);\n        this.setState({\n          channel,\n          root: false,\n          currentChannel: {\n            sid: channel.sid,\n            uniqueName: channel.uniqueName,\n            type: type\n          }\n        });\n        return this.channel.join().catch(() => {});\n      })\n      .then(() => {\n        this.setState({ isLoading: false });\n        this.channel.getMessages().then(this.messagesLoaded);\n        console.log('type: ', type);\n        this.setState( {\n          users: [...this.state.users,\n            type === 'web'\n              ? channelName === 'web-1'\n              ? {name: 'John Webber'}\n              : channelName === 'web-2'\n                ? {name: \"Tom Peet\"}\n                : channelName === 'web-3'\n                  ? {name: \"Peter Kook\"}\n                  : {name: \"Artur Doil\"}\n              : this.driverTextNow\n          ] });\n        console.log('users: ', this.state.users);\n        console.log('currentChannel: ', this.state.currentChannel);\n        this.channel.on('messageAdded', this.messageAdded);\n      })\n      .catch(this.handleError);\n  }\n\n  deleteAllTextnowChannels() {\n    let { URL, identity } = this;\n    for (let i = 1; i <= 20; i++ ) {\n      $.ajax({\n        url: URL + '/chats/' + `${i}`,\n        type: 'DELETE',\n        headers: {\n          \"Authorization\":\"Bearer \" + identity //TODO: add jwt\n        }\n      })\n        .then(response => {\n          console.log('response: ', response);\n        });\n    }\n  }\n\n  deleteCurrentTextnowChannels() {\n    let { URL, identity } = this;\n\n    this.state.currentTextnowChatId && $.ajax({\n      url: URL + '/chats/' + this.state.currentTextnowChatId,\n      type: 'DELETE',\n      headers: {\n        \"Authorization\":\"Bearer \" + identity //TODO: add jwt\n      }\n    })\n      .then(response => {\n        console.log('response: ', response);\n      });\n  }\n\n  setupChatBySMS() {\n    let { URL, identity, driverId, communicationType } = this;\n\n    $.ajax({\n      url: URL + '/chats',\n      type: 'POST',\n      headers: {\n        \"Authorization\":\"Bearer \" + identity //TODO: add jwt\n      },\n      contentType: \"application/json\",\n      data:  '{\"communicationType\": \"' + communicationType + '\",' +\n        '\"masterDriverId\": \"' + driverId + '\"}'\n    })\n      .then(response => {\n        this.setState({ currentTextnowChatId: response.chatId });\n        console.log('currentTextnowChatId: ', this.state.currentTextnowChatId);\n\n        return $.ajax({\n          url: URL + '/chats/' + response.chatId,\n          type: 'PUT',\n          headers: {\n            \"Authorization\":\"Bearer \" + identity //TODO: add jwt\n          },\n          contentType: \"application/json\"\n        });\n      })\n      .then(response => {\n        this.setupSecondaryChat(response.twilioChatId, 'textnow')\n      })\n      .catch(error => console.error('error: ', error))\n  }\n\n  /* adds a new message to the chatroom */\n  sendMessage(sender, message) {\n    setTimeout(() => {\n      let newMessageItem = {\n        id: this.state.messagesReal.length,\n        sender: sender,\n        message: detectURL(message),\n        timestamp: new Date()\n      };\n      this.setState(prevState => ({\n        messagesReal: [\n          ...prevState.messagesReal,\n          newMessageItem\n        ]\n      }));\n      this.channel.sendMessage(message);\n      this.resetTyping(sender);\n    }, 400);\n  }\n\n  /* updates the writing indicator if not already displayed */\n  typing(writer) {\n    if( !this.state.isTyping[writer] ) {\n      let stateTyping = this.state.isTyping;\n      stateTyping[writer] = true;\n      this.setState({ isTyping: stateTyping });\n    }\n  }\n  /* hide the writing indicator */\n  resetTyping(writer) {\n    let stateTyping = this.state.isTyping;\n    stateTyping[writer] = false;\n    this.setState({ isTyping: stateTyping });\n  }\n\n  twilioMessageToUIMessage(message, index) {\n    return {\n      id: index,\n      message: message.body,\n      sender: message.author,\n      timestamp: message.timestamp\n    };\n  }\n\n  twilioMessageToUIMessageReal(message, index) {\n    const { messagesReal } = this.state;\n    const msg = messagesReal && messagesReal.find(msg => msg.message === message.body);\n    const sender = msg && msg.sender;\n    return {\n      id: index,\n      message: message.body,\n      sender: sender ? sender : message.author,\n      timestamp: message.timestamp\n    };\n  }\n\n  messagesLoaded(messagePage) {\n    this.setState({\n      messages: messagePage.items.map(this.twilioMessageToUIMessage),\n      messagesReal: messagePage.items.map(this.twilioMessageToUIMessageReal)\n    });\n  }\n\n  messageAdded(message) {\n    this.setState(prevState => ({\n      messages: [\n        ...prevState.messages,\n        this.twilioMessageToUIMessageReal(message, prevState.messages.length)\n      ],\n      // messagesReal: [\n      //   ...prevState.messagesReal,\n      //   this.twilioMessageToUIMessageReal(message, prevState.messages.length)\n      // ]\n    }));\n  }\n\n  startEmptyChat() {\n    this.setState({ root: false, messagesReal: [], messages: [], currentChannel: null });\n  }\n\n  endChat(sid) {\n    console.log('sid: ', sid);\n    this.setState(prevState => ({\n      closedChannelList: [\n        ...prevState.closedChannelList,\n        { channel: sid, status: 'archived' }\n      ]\n    }));\n    console.log('this.state.closedChannelList: ', this.state.closedChannelList);\n    this.backToChannelList();\n  }\n\n  backToChannelList() {\n    this.getAllChannels();\n    this.setState({ users: [ this.agent ], root: true });\n  }\n\n  openChatBox() {\n    this.setState(prevState => ({\n      isChatBoxOpen: !prevState.isChatBoxOpen\n    }));\n\n  }\n\n  render() {\n    const {\n      state: {\n        users,\n        root,\n        messages,\n        isTyping,\n        allChannels,\n        closedChannelList,\n        currentChannel,\n        isChatBoxOpen\n      },\n      openChatBox,\n      sendMessage,\n      setupSecondaryChat,\n      setupChatBySMS,\n      typing,\n      resetTyping,\n      endChat,\n      backToChannelList,\n      startEmptyChat,\n      deleteAllTextnowChannels\n    } = this;\n    let chatBoxes = [];\n\n    /* creation of a chatbox for each user present in the chatroom */\n    Object.keys(users).map(function(key) {\n      var user = users[key];\n      if (root && key > 0) return null;\n      return chatBoxes.push(\n        <ChatBox\n          key={key}\n          owner={user.name}\n          sendMessage={sendMessage}\n          typing={typing}\n          resetTyping={resetTyping}\n          messages={messages}\n          isTyping={isTyping}\n          isRoot={root}\n          isSingleUser={users.length === 1}\n          channelList={allChannels}\n          closedChannelList={closedChannelList}\n          joinChannel={setupSecondaryChat}\n          startEmptyChat={startEmptyChat}\n          startViaWeb={setupSecondaryChat}\n          startViaTextnow={setupChatBySMS}\n          deleteAllChannels={deleteAllTextnowChannels}\n          backToRoot={backToChannelList}\n          endChat={endChat}\n          currentChannel={currentChannel}\n        />\n      );\n    });\n    return (\n      <Fragment>\n        {isChatBoxOpen &&\n          <div className={\"chatApp__room\"}>\n            {chatBoxes}\n          </div>\n        }\n        <div className={`open-chat-app ${isChatBoxOpen && 'shown'}`}\n             onClick={openChatBox}\n             data-tooltip={`${!isChatBoxOpen ? 'Open' : 'Close'} Chat Box`}\n        >\n          {isChatBoxOpen\n            ? chatBoxes.length\n              ? <i className=\"fas fa-times\"></i>\n              : <i className=\"fas fa-spinner fa-spin\"></i>\n            : <i className=\"fas fa-comments\"></i>\n          }\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default ChatRoom;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles.css';\nimport ChatRoom from './App';\n\n/* render the chatroom */\nsetTimeout(() => {\n  ReactDOM.render(<ChatRoom />, document.getElementById(\"root\"));\n}, 400);"],"sourceRoot":""}