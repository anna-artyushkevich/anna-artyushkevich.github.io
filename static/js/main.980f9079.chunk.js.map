{"version":3,"sources":["App.js","index.js"],"names":["mainIdentity","drivers","label","value","detectURL","message","replace","urlMatch","Title","props","className","owner","InputMessage","context","handleSendMessage","bind","handleTyping","event","preventDefault","this","messageInput","length","sendMessageLoading","ownerInput","typing","resetTyping","loadingClass","isLoading","sendButtonIcon","onSubmit","type","ref","placeholder","onKeyDown","onKeyUp","tabIndex","onClick","React","Component","TypingIndicator","typersDisplay","countTypers","key","isTyping","substr","HeaderBox","style","control","base","state","border","isFocused","boxShadow","fontSize","option","handleChange","options","e","console","log","startViaWeb","startViaTextnow","isRoot","isSingleUser","currentChannel","endChat","allStatuses","uniqueName","split","pop","find","dr","parseInt","driverReadOnly","ch","channel","sid","deleteAllChannels","Fragment","backToRoot","onChange","styles","isSearchable","ActionBox","sender","setState","sendMessage","setTimeout","startEmptyChat","MessageList","messages","slice","reverse","map","messageItem","id","timestamp","MessageItem","messagePosition","dangerouslySetInnerHTML","__html","moment","fromNow","ChannelList","clickHandler","joinChannel","channelList","flag","Object","keys","channelItem","status","author","body","friendlyName","ChatBox","ChatRoom","error","root","messagesReal","allChannels","users","allChannelStatuses","currentTextnowChatId","getAllChannels","setupChatClient","messagesLoaded","messageAdded","handleError","setupSecondaryChat","setupChatBySMS","deleteAllTextnowChannels","deleteCurrentTextnowChannels","twilioMessageToUIMessageReal","twilioMessageToUIMessage","backToChannelList","identity","URL","agent","name","driverWeb","driverTextNow","driverId","communicationType","client","rootChannel","$","ajax","url","contentType","data","then","Chat","create","token","catch","cl","getUserChannelDescriptors","paginator","promise","when","items","forEach","getChannelByUniqueName","getMessages","totalMessages","lastMessage","push","sort","a","b","Date","getTime","code","createChannel","join","on","channelName","i","headers","response","leave","chatId","twilioChatId","newMessageItem","prevState","writer","stateTyping","index","msg","messagePage","chatBoxes","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.980f9079.chunk.js","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link, withRouter } from 'react-router-dom';\nimport Chat from 'twilio-chat';\nimport $ from 'jquery';\nimport moment from 'moment';\nimport Select from 'react-select';\n\nconst mainIdentity = 'agents@gocurb.com';\nconst drivers = [\n    { label: \"John Webber\", value: 1 },\n    { label: \"Tom Peet\", value: 2 },\n    { label: \"Peter Kook\", value: 3 },\n    { label: \"Artur Doil\", value: 4 },\n    { label: \"+13155896818\", value: 5 }\n];\n\n/* detect url in a message and add a link tag */\nfunction detectURL(message) {\n  var urlRegex = /(((https?:\\/\\/)|(www\\.))[^\\s]+)/g;\n  return message.replace(urlRegex, function(urlMatch) {\n    return '<a href=\"' + urlMatch + '\">' + urlMatch + '</a>';\n  })\n}\n\n/* Title component */\nconst Title = props => (\n  <div className={\"chatApp__convTitle\"}>{props.owner}'s display</div>\n);\n\n/* InputMessage component - used to type the message */\nclass InputMessage extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.handleSendMessage = this.handleSendMessage.bind(this);\n    this.handleTyping = this.handleTyping.bind(this);\n  }\n  handleSendMessage(event) {\n    event.preventDefault();\n    /* Disable sendMessage if the message is empty */\n    if( this.messageInput.value.length > 0 ) {\n      this.props.sendMessageLoading(this.ownerInput.value, this.messageInput.value);\n      /* Reset input after send*/\n      this.messageInput.value = '';\n    }\n  }\n  handleTyping(event) {\n    /* Tell users when another user has at least started to write */\n    if( this.messageInput.value.length > 0 ) {\n      this.props.typing(this.ownerInput.value);\n    }\n    else {\n      /* When there is no more character, the user no longer writes */\n      this.props.resetTyping(this.ownerInput.value);\n    }\n  }\n  render() {\n    /* If the chatbox state is loading, loading class for display */\n    var loadingClass = this.props.isLoading ? 'chatApp__convButton--loading' : '';\n    let sendButtonIcon = <i className={\"material-icons\"}>send</i>;\n    return (\n      <form onSubmit={this.handleSendMessage}>\n        <input\n          type=\"hidden\"\n          ref={owner => (this.ownerInput = owner)}\n          value={this.props.owner}\n        />\n        <input\n          type=\"text\"\n          ref={message => (this.messageInput = message)}\n          className={\"chatApp__convInput\"}\n          placeholder=\"Send message...\"\n          onKeyDown={this.handleTyping}\n          onKeyUp={this.handleTyping}\n          tabIndex=\"0\"\n        />\n        <div className={'chatApp__convButton ' + loadingClass} onClick={this.handleSendMessage}>\n          {sendButtonIcon}\n        </div>\n      </form>\n    );\n  }\n}\n\n/* TypingIndicator component */\nconst TypingIndicator = props => {\n  let typersDisplay = '';\n  let countTypers = 0;\n  /* for each user writing messages in chatroom */\n  for ( var key in props.isTyping ) {\n    /* retrieve the name if it isn't the owner of the chatbox */\n    if( key !== props.owner && props.isTyping[key] ) {\n      typersDisplay += ', ' + key;\n      countTypers++;\n    }\n  }\n  /* formatting text */\n  typersDisplay = typersDisplay.substr(1);\n  typersDisplay += (( countTypers > 1 ) ? ' are ' : ' is ');\n  /* if at least one other person writes */\n  if ( countTypers > 0 ) {\n    return (\n      <div className={\"chatApp__convTyping\"}>{typersDisplay} writing\n        <span className={\"chatApp__convTypingDot\"}></span>\n      </div>\n    );\n  }\n  return (\n    <div className={\"chatApp__convTyping\"}></div>\n  );\n}\n\n/* HeaderBox component - contains navigation controls */\nclass HeaderBox extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.handleChange = this.handleChange.bind(this);\n    this.drivers = [\n      {\n        label: \"chat with fake drivers\",\n        options: [ drivers[0], drivers[1], drivers[2], drivers[3] ]\n      },\n      {\n        label: \"chat via textNow\",\n        options: [ drivers[4] ]\n      },\n    ];\n  }\n  handleChange(e) {\n    console.log('e:', e);\n\n    if (e.value !== 5)\n      this.props.startViaWeb(`web-${e.value}`, 'web');\n    else\n      this.props.startViaTextnow();\n  }\n  style = {\n    control: (base, state) => ({\n      ...base,\n      border: state.isFocused ? 0 : 0,\n      // This line disable the blue border\n      boxShadow: state.isFocused ? 0 : 0,\n      \"&:hover\": {\n        border: state.isFocused ? 0 : 0\n      },\n      fontSize: 14\n    }),\n    option: (base) => {\n      return {\n        ...base,\n        fontSize: 14\n      }\n    }\n  };\n\n  render () {\n    const {isRoot, isSingleUser, currentChannel, endChat, allStatuses} = this.props;\n    console.log('currentChannel:', currentChannel);\n\n    let value = currentChannel && (currentChannel.type === 'web' ? currentChannel.uniqueName.split('-').pop() : '5');\n    let option = drivers && drivers.find(dr => dr.value === parseInt(value));\n    let driverReadOnly = option && option.label;\n    let ch = allStatuses && allStatuses.find(ch => ch.channel === currentChannel.sid);\n    console.log('value:', value, option, driverReadOnly, currentChannel, ch, isSingleUser);\n\n    return (\n      <div className='header'>\n        {isRoot\n          ? <div className='all-conv'>All Chats\n              <button\n                className='link delete'\n                onClick={this.props.deleteAllChannels}\n              >\n                Delete all textNow chats\n              </button>\n            </div>\n          : (this.props.owner === mainIdentity &&\n              <React.Fragment>\n                <button\n                  className='link'\n                  onClick={this.props.backToRoot}\n                >\n                  <i className=\"fas fa-chevron-left\"></i>\n                </button>\n                {!driverReadOnly\n                  ? <div className='dropdown'>\n                      <div className='label'>To:</div>\n                      <Select\n                        placeholder={'Select Driver...'}\n                        options={this.drivers}\n                        onChange={this.handleChange.bind(this)}\n                        styles={this.style}\n                        isSearchable\n                      />\n                    </div>\n                  : <div className='dropdown'>\n                      <div className='label'>{driverReadOnly}</div>\n                    </div>\n                }\n                {!isSingleUser && !ch &&\n                  <div className='end-chat'>\n                    <i className=\"fas fa-ellipsis-v\"></i>\n                    <button\n                      className='end-chat-btn'\n                      onClick={endChat.bind(this, currentChannel.sid)}\n                    >\n                      <i className=\"fas fa-times\"></i> End this chat session\n                    </button>\n                  </div>\n                }\n              </React.Fragment>\n            )\n        }\n      </div>\n    );\n  }\n}\n\n/* ActionBox component - contains send buttons */\nclass ActionBox extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      isLoading: false\n    };\n    this.sendMessageLoading = this.sendMessageLoading.bind(this);\n  }\n  /* catch the sendMessage signal and update the loading state then continues the sending instruction */\n  sendMessageLoading(sender, message) {\n    this.setState({ isLoading: true });\n    this.props.sendMessage(sender, message);\n    setTimeout(() => {\n      this.setState({ isLoading: false });\n    }, 400);\n  }\n  render() {\n    let ch = this.props.allStatuses && this.props.allStatuses.find(ch => ch.channel === this.props.currentChannel.sid);\n    return (\n      <div className={\"chatApp__convSendMessage clearfix\"}>\n        {!this.props.isRoot\n          ? (!this.props.isSingleUser && !ch &&\n              <React.Fragment>\n                <TypingIndicator\n                  owner={this.props.owner}\n                  isTyping={this.props.isTyping}\n                />\n                <InputMessage\n                  isLoading={this.state.isLoading}\n                  owner={this.props.owner}\n                  sendMessage={this.props.sendMessage}\n                  sendMessageLoading={this.sendMessageLoading}\n                  typing={this.props.typing}\n                  resetTyping={this.props.resetTyping}\n                />\n              </React.Fragment>)\n          : <div className='start-chat-wrapper'>\n              <button\n                className='btn start-chat'\n                onClick={this.props.startEmptyChat}\n              >\n                Start New Chat\n              </button>\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\n/* MessageList component - contains all messages */\nclass MessageList extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n  }\n\n  render() {\n    const {messages, isRoot} = this.props;\n    if (isRoot) return false;\n\n    return (\n      <div className={\"chatApp__convTimeline\"}>\n        {messages.slice(0).reverse().map(\n          messageItem => (\n            <MessageItem\n              key={messageItem.id}\n              owner={this.props.owner}\n              sender={messageItem.sender}\n              message={messageItem.message}\n              timestamp={messageItem.timestamp}\n            />\n          ))\n        }\n      </div>\n    );\n  }\n}\n\n/* MessageItem component - composed of a message and the sender's avatar */\nconst MessageItem = props => {\n  /* message position formatting - right if I'm the author */\n  let messagePosition = (( props.owner === props.sender ) ? 'chatApp__convMessageItem--left' : 'chatApp__convMessageItem--right');\n  return (\n    <div className={\"chatApp__convMessageItem \" + messagePosition + \" clearfix\"}>\n      <div className=\"chatApp__convMessageValue\" dangerouslySetInnerHTML={{__html: props.message}}></div>\n      <div className=\"chatApp__convMessageTime\">{ moment(props.timestamp).fromNow() }</div>\n      <div className=\"chatApp__convMessageAvatar\">{props.sender}</div>\n    </div>\n  );\n}\n\n/* ChannelList component - contains all channels */\nclass ChannelList extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n  clickHandler(channel) {\n    console.log('onClick channel:', channel.uniqueName, ' ', channel.sid);\n    const type = channel.uniqueName ? 'web' : 'textnow'\n    this.props.joinChannel(channel.uniqueName || channel.sid, type);\n  }\n  render() {\n    let {isRoot, channelList, allStatuses} = this.props;\n    if (!isRoot) return false;\n\n    let clickHandler = this.clickHandler;\n    let flag = false;\n    console.log('allStatuses: ', allStatuses);\n    return (\n      <div className={\"chatApp__convTimeline\"}>\n        <div className={\"chatApp__convChannelLine\"}>\n          {Object.keys(channelList).map(function(key) {\n            var channelItem = channelList[key];\n            let ch = allStatuses && allStatuses.find(ch => ch.channel === channelItem.sid);\n            let className;\n            if (ch) {\n              className = ch.status;\n              flag = flag ? false : true;\n            }\n            return (\n              <a\n                key={key}\n                className={`channelItem ${className}`}\n                {...(className && flag && {'data-header': 'Archived chats'})}\n                onClick={clickHandler.bind(this, channelItem)}\n              >\n                <div>\n                  <div className='channelAuthor'>{channelItem.author}</div>\n                  <div className='channelTime'>{channelItem.timestamp && moment(channelItem.timestamp).fromNow()}</div>\n                </div>\n                <div>\n                  <div className='channelBody'>{channelItem.body}</div>\n                  <div className='channelName'>{channelItem.friendlyName}</div>\n                </div>\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\n/* ChatBox component - composed of Title, MessageList, TypingIndicator, InputMessage */\nconst ChatBox = props => (\n  <div className={\"chatApp__conv\"}>\n    <Title\n      owner={props.owner}\n    />\n    <HeaderBox\n      isRoot={props.isRoot}\n      owner={props.owner}\n      isSingleUser={props.isSingleUser}\n      startViaWeb={props.startViaWeb}\n      startViaTextnow={props.startViaTextnow}\n      deleteAllChannels={props.deleteAllChannels}\n      backToRoot={props.backToRoot}\n      allStatuses={props.allStatuses}\n      endChat={props.endChat}\n      currentChannel={props.currentChannel}\n    />\n    <MessageList\n      owner={props.owner}\n      messages={props.messages}\n      isRoot={props.isRoot}\n    />\n    <ChannelList\n      channelList={props.channelList}\n      joinChannel={props.joinChannel}\n      allStatuses={props.allStatuses}\n      endChat={props.endChat}\n      isRoot={props.isRoot}\n    />\n    <ActionBox\n      owner={props.owner}\n      isTyping={props.isTyping}\n      sendMessage={props.sendMessage}\n      typing={props.typing}\n      resetTyping={props.resetTyping}\n      isRoot={props.isRoot}\n      startEmptyChat={props.startEmptyChat}\n      allStatuses={props.allStatuses}\n      isSingleUser={props.isSingleUser}\n      currentChannel={props.currentChannel}\n    />\n  </div>\n);\n\n/* ChatRoom component - composed of multiple ChatBoxes */\nclass ChatRoom extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      isTyping: [],\n      error: null,\n      isLoading: true,\n      channel: null,\n      root: true,\n      messages: [],\n      messagesReal: [],\n      allChannels: [],\n      users: [],\n      currentChannel: null,\n      allChannelStatuses: [],\n      currentTextnowChatId: null\n  };\n\n    this.typing = this.typing.bind(this);\n    this.resetTyping = this.resetTyping.bind(this);\n    this.getAllChannels = this.getAllChannels.bind(this);\n    this.setupChatClient = this.setupChatClient.bind(this);\n    this.messagesLoaded = this.messagesLoaded.bind(this);\n    this.messageAdded = this.messageAdded.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.setupSecondaryChat = this.setupSecondaryChat.bind(this);\n    this.setupChatBySMS = this.setupChatBySMS.bind(this);\n    this.deleteAllTextnowChannels = this.deleteAllTextnowChannels.bind(this);\n    this.deleteCurrentTextnowChannels = this.deleteCurrentTextnowChannels.bind(this);\n    this.twilioMessageToUIMessageReal = this.twilioMessageToUIMessageReal.bind(this);\n    this.twilioMessageToUIMessage = this.twilioMessageToUIMessage.bind(this);\n    this.backToChannelList = this.backToChannelList.bind(this);\n    this.startEmptyChat = this.startEmptyChat.bind(this);\n    this.endChat = this.endChat.bind(this);\n\n    this.identity = mainIdentity;\n    this.URL = 'https://ehail.stage.gocurb.com:5443';\n    this.agent = { name: mainIdentity };\n    this.driverWeb = { name: 'driver in web' };\n    this.driverTextNow = { name: '+13155896818' };\n    this.driverId = '1';\n    this.communicationType = 'SMS';\n    this.client = null;\n    this.rootChannel = 'all-agents';\n  }\n\n  componentWillMount() {\n    let { URL, identity } = this;\n    $.ajax({\n      url: URL + '/token',\n      type: 'POST',\n      contentType: \"application/json\",\n      data :  '{\"identity\":\"' + identity + '\"}'\n    })\n      .then(data => Chat.create(data.token))\n      .then(client => {\n        this.client = client;\n        return client;\n      })\n      .then(this.getAllChannels)\n      //.then(this.setupChatClient)\n      .catch(this.handleError);\n  }\n\n  componentWillUnmount () {\n    this.deleteCurrentTextnowChannels();\n  }\n\n  handleError(error) {\n    console.error(error);\n    this.setState({\n      error: 'Could not load chat.'\n    });\n  }\n\n  getAllChannels(client) {\n    let cl = client || this.client;\n    var allChannels = [];\n    console.log('this.client: ', this.client);\n    cl.getUserChannelDescriptors().then(function(paginator) {\n      console.log('paginator: ', paginator);\n      var promise = $.when();\n      paginator.items.forEach(channel => {\n        promise = promise.then(() => {\n          return cl.getChannelByUniqueName(channel.uniqueName || channel.sid)\n            .then(channel => {\n              return channel.getMessages().then(function (messages) {\n                console.log('Channel: ', channel);\n                console.log('Channel messages: ', messages.items);\n                const totalMessages = messages.items.length;\n                let lastMessage = messages.items[totalMessages - 1];\n                allChannels.push({\n                  uniqueName: channel.uniqueName,\n                  sid: channel.sid,\n                  friendlyName: channel.friendlyName,\n                  author: (lastMessage && lastMessage.author) || '',\n                  body: (lastMessage && lastMessage.body) || '',\n                  timestamp: (lastMessage && lastMessage.timestamp) || null\n                });\n              });\n            });\n        })\n      });\n      return promise;\n    })\n      .then(() => {\n        const users = [ this.agent ];\n        allChannels.sort((a, b) => (new Date(a.timestamp).getTime() > new Date(b.timestamp).getTime()) ? 1 : -1);\n        this.setState( { allChannels, users });\n        console.log('users: ', this.state.users);\n      })\n  }\n\n  setupChatClient(client) {\n    this.client = client;\n    this.client.getChannelByUniqueName(this.rootChannel)\n      .then(channel => channel)\n      .catch(error => {\n        if (error.body.code === 50300) {\n          return this.client.createChannel({ uniqueName: this.rootChannel });\n        } else {\n          this.handleError(error);\n        }\n      })\n      .then(channel => {\n        this.channel = channel;\n        console.log('this.channel: ', this.channel, ',  this.client', this.client);\n        this.setState({ channel, root: false })\n        return this.channel.join().catch(() => {});\n      })\n      .then(() => {\n        this.setState({ isLoading: false });\n        this.channel.getMessages().then(this.messagesLoaded);\n        this.channel.on('messageAdded', this.messageAdded);\n      })\n      .catch(this.handleError);\n  }\n\n  setupSecondaryChat(channelName, type) {\n    console.log('setupSecondaryChat channelName', channelName);\n\n    this.client.getChannelByUniqueName(channelName)\n      .then(channel => channel)\n      .catch(error => {\n        if (error && error.body && error.body.code === 50300) {\n          return this.client.createChannel({\n            uniqueName: channelName,\n            friendlyName: type === 'web'\n              ? channelName === 'web-1'\n                ? 'John Webber via Web'\n                : channelName === 'web-2'\n                  ? 'Tom Peet via Web'\n                  : channelName === 'web-3'\n                    ? 'Peter Kook via Web'\n                    : 'Artur Doil via Web'\n              : 'Driver via TextNow' });\n        } else {\n          this.handleError(error);\n        }\n      })\n      .then(channel => {\n        this.channel = channel;\n        console.log('setupSecondaryChat this.channel: ', this.channel);\n        this.setState({\n          channel,\n          root: false,\n          currentChannel: {\n            sid: channel.sid,\n            uniqueName: channel.uniqueName,\n            type: type\n          }\n        });\n        return this.channel.join().catch(() => {});\n      })\n      .then(() => {\n        this.setState({ isLoading: false });\n        this.channel.getMessages().then(this.messagesLoaded);\n        console.log('type: ', type);\n        this.setState( {\n          users: [...this.state.users,\n            type === 'web'\n              ? channelName === 'web-1'\n              ? {name: 'John Webber'}\n              : channelName === 'web-2'\n                ? {name: \"Tom Peet\"}\n                : channelName === 'web-3'\n                  ? {name: \"Peter Kook\"}\n                  : {name: \"Artur Doil\"}\n              : this.driverTextNow\n          ] });\n        console.log('users: ', this.state.users);\n        console.log('currentChannel: ', this.state.currentChannel);\n        this.channel.on('messageAdded', this.messageAdded);\n      })\n      .catch(this.handleError);\n  }\n\n  deleteAllTextnowChannels() {\n    let { URL, identity } = this;\n    for (let i = 1; i <= 20; i++ ) {\n      $.ajax({\n        url: URL + '/chats/' + i,\n        type: 'DELETE',\n        headers: {\n          \"Authorization\":\"Bearer \" + identity //TODO: add jwt\n        }\n      })\n        .then(response => {\n          console.log('response: ', response);\n          this.client.leave();\n        });\n    }\n  }\n\n  deleteCurrentTextnowChannels() {\n    let { URL, identity } = this;\n\n    this.state.currentTextnowChatId && $.ajax({\n      url: URL + '/chats/' + this.state.currentTextnowChatId,\n      type: 'DELETE',\n      headers: {\n        \"Authorization\":\"Bearer \" + identity //TODO: add jwt\n      }\n    })\n      .then(response => {\n        console.log('response: ', response);\n        this.client.leave();\n      });\n  }\n\n  setupChatBySMS() {\n    let { URL, identity, driverId, communicationType } = this;\n\n    $.ajax({\n      url: URL + '/chats',\n      type: 'POST',\n      headers: {\n        \"Authorization\":\"Bearer \" + identity //TODO: add jwt\n      },\n      contentType: \"application/json\",\n      data:  '{\"communicationType\": \"' + communicationType + '\",' +\n        '\"masterDriverId\": \"' + driverId + '\"}'\n    })\n      .then(response => {\n        return $.ajax({\n          url: URL + '/chats/' + response.chatId,\n          type: 'PUT',\n          headers: {\n            \"Authorization\":\"Bearer \" + identity //TODO: add jwt\n          },\n          contentType: \"application/json\"\n        });\n      })\n      .catch(error => console.log('error: ', error))\n      .then(response => {\n        this.setState({ currentTextnowChatId: response.chatId });\n        console.log('currentTextnowChatId: ', this.state.currentTextnowChatId);\n        this.setupSecondaryChat(response.twilioChatId, 'textnow')\n      })\n      .catch(this.handleError);\n  }\n\n  /* adds a new message to the chatroom */\n  sendMessage(sender, message) {\n    setTimeout(() => {\n      let newMessageItem = {\n        id: this.state.messagesReal.length,\n        sender: sender,\n        message: detectURL(message),\n        timestamp: new Date()\n      };\n      this.setState(prevState => ({\n        messagesReal: [\n          ...prevState.messagesReal,\n          newMessageItem\n        ]\n      }));\n      this.channel.sendMessage(message);\n      this.resetTyping(sender);\n    }, 400);\n  }\n\n  /* updates the writing indicator if not already displayed */\n  typing(writer) {\n    if( !this.state.isTyping[writer] ) {\n      let stateTyping = this.state.isTyping;\n      stateTyping[writer] = true;\n      this.setState({ isTyping: stateTyping });\n    }\n  }\n  /* hide the writing indicator */\n  resetTyping(writer) {\n    let stateTyping = this.state.isTyping;\n    stateTyping[writer] = false;\n    this.setState({ isTyping: stateTyping });\n  }\n\n  twilioMessageToUIMessage(message, index) {\n    return {\n      id: index,\n      message: message.body,\n      sender: message.author,\n      timestamp: message.timestamp\n    };\n  }\n\n  twilioMessageToUIMessageReal(message, index) {\n    const { messagesReal } = this.state;\n    const msg = messagesReal && messagesReal.find(msg => msg.message === message.body);\n    const sender = msg && msg.sender;\n    return {\n      id: index,\n      message: message.body,\n      sender: sender ? sender : message.author,\n      timestamp: message.timestamp\n    };\n  }\n\n  messagesLoaded(messagePage) {\n    this.setState({\n      messages: messagePage.items.map(this.twilioMessageToUIMessage),\n      messagesReal: messagePage.items.map(this.twilioMessageToUIMessageReal)\n    });\n  }\n\n  messageAdded(message) {\n    this.setState(prevState => ({\n      messages: [\n        ...prevState.messages,\n        this.twilioMessageToUIMessageReal(message, prevState.messages.length)\n      ],\n      // messagesReal: [\n      //   ...prevState.messagesReal,\n      //   this.twilioMessageToUIMessageReal(message, prevState.messages.length)\n      // ]\n    }));\n  }\n\n  startEmptyChat() {\n    this.setState({ root: false, messagesReal: [], messages: [], currentChannel: null });\n  }\n\n  endChat(sid) {\n    console.log('sid: ', sid);\n    this.setState(prevState => ({\n      allChannelStatuses: [\n        ...prevState.allChannelStatuses,\n        { channel: sid, status: 'archived' }\n      ]\n    }));\n    console.log('this.state.allChannelStatuses: ', this.state.allChannelStatuses);\n    this.backToChannelList();\n  }\n\n  backToChannelList() {\n    this.getAllChannels();\n    this.setState({ users: [ this.agent ], root: true });\n  }\n\n  render() {\n    const {\n      state: {\n        users,\n        root,\n        messages,\n        isTyping,\n        allChannels,\n        allChannelStatuses,\n        currentChannel\n      },\n      sendMessage,\n      setupSecondaryChat,\n      setupChatBySMS,\n      typing,\n      resetTyping,\n      endChat,\n      backToChannelList,\n      startEmptyChat,\n      deleteAllTextnowChannels\n    } = this;\n    let chatBoxes = [];\n\n    /* creation of a chatbox for each user present in the chatroom */\n    Object.keys(users).map(function(key) {\n      var user = users[key];\n      if (root && key > 0) return null;\n      return chatBoxes.push(\n        <ChatBox\n          key={key}\n          owner={user.name}\n          sendMessage={sendMessage}\n          typing={typing}\n          resetTyping={resetTyping}\n          messages={messages}\n          isTyping={isTyping}\n          isRoot={root}\n          isSingleUser={users.length === 1}\n          channelList={allChannels}\n          allStatuses={allChannelStatuses}\n          joinChannel={setupSecondaryChat}\n          startEmptyChat={startEmptyChat}\n          startViaWeb={setupSecondaryChat}\n          startViaTextnow={setupChatBySMS}\n          deleteAllChannels={deleteAllTextnowChannels}\n          backToRoot={backToChannelList}\n          endChat={endChat}\n          currentChannel={currentChannel}\n        />\n      );\n    });\n    return (\n      <div className={\"chatApp__room\"}>\n        {chatBoxes}\n      </div>\n    );\n  }\n}\n\nexport default ChatRoom;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles.css';\nimport ChatRoom from './App';\n\n/* render the chatroom */\nsetTimeout(() => {\n  ReactDOM.render(<ChatRoom />, document.getElementById(\"root\"));\n}, 400);"],"sourceRoot":""}